name: Convert M3U8 to M3U

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 * * * *'  # Runs every hour at minute 0

jobs:
  convert-m3u8-to-m3u:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js (if needed for processing)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget
        
    - name: Download M3U8 files
      run: |
        # Your M3U8 file URLs (verified clean URLs)
        PPV_URL="https://iptv-scraper-re.vercel.app/ppv?timezone=cet"
        DLIVE_URL="https://world-proxifier.xyz/daddylive/playlist.m3u8?timezone=cet"
        
        echo "PPV URL: $PPV_URL"
        echo "DaddyLive URL: $DLIVE_URL"
        
        # Create output directory
        mkdir -p downloads
        
        # Download PPV M3U8 file
        echo "Downloading PPV M3U8 file..."
        wget --timeout=30 --tries=3 -O downloads/ppv.m3u8 "$PPV_URL" || curl --max-time 30 --retry 3 -o downloads/ppv.m3u8 "$PPV_URL"
        
        # Download DaddyLive M3U8 file with better error handling
        echo "Downloading DaddyLive M3U8 file..."
        echo "Attempting to download: $DLIVE_URL"
        if ! wget --timeout=30 --tries=2 --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" -O downloads/dlive.m3u8 "$DLIVE_URL" 2>&1; then
          echo "wget failed, trying curl..."
          if ! curl --max-time 30 --retry 2 --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" -L -o downloads/dlive.m3u8 "$DLIVE_URL" 2>&1; then
            echo "Both wget and curl failed for DaddyLive URL"
            echo "Creating empty placeholder file..."
            mkdir -p downloads
            echo "#EXTM3U" > downloads/dlive.m3u8
            echo "#EXTINF:-1,DaddyLive - Download Failed" >> downloads/dlive.m3u8
            echo "# Error: Could not download from $DLIVE_URL" >> downloads/dlive.m3u8
          fi
        fi
        
    - name: Check downloaded files
      run: |
        echo "=== Download Status ==="
        if [ -f "downloads/ppv.m3u8" ]; then
          echo "✓ PPV file downloaded successfully"
          echo "Size: $(ls -lh downloads/ppv.m3u8 | awk '{print $5}')"
        else
          echo "✗ PPV file download failed"
        fi
        
        if [ -f "downloads/dlive.m3u8" ]; then
          echo "✓ DaddyLive file downloaded successfully"
          echo "Size: $(ls -lh downloads/dlive.m3u8 | awk '{print $5}')"
          echo "First few lines:"
          head -n 5 downloads/dlive.m3u8
        else
          echo "✗ DaddyLive file download failed"
        fi
        
    - name: Convert M3U8 to M3U
      run: |
        # Create conversion script
        cat > convert_to_m3u.py << 'EOF'
        import os
        import re
        
        def convert_m3u8_to_m3u(input_file, output_file):
            """Convert M3U8 format to M3U format"""
            try:
                with open(input_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Remove M3U8 specific tags but keep essential ones
                lines = content.split('\n')
                m3u_lines = []
                
                for line in lines:
                    line = line.strip()
                    if not line:
                        continue
                    
                    # Keep M3U header
                    if line.startswith('#EXTM3U'):
                        m3u_lines.append(line)
                    # Keep track info
                    elif line.startswith('#EXTINF:'):
                        m3u_lines.append(line)
                    # Keep URLs (not starting with #)
                    elif not line.startswith('#'):
                        m3u_lines.append(line)
                    # Optionally keep some other tags
                    elif line.startswith('#EXTVLCOPT:'):
                        m3u_lines.append(line)
                
                # Write M3U file
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(m3u_lines))
                
                print(f"Successfully converted {input_file} to {output_file}")
                return True
                
            except Exception as e:
                print(f"Error converting {input_file}: {str(e)}")
                return False
        
        def combine_m3u8_files(file1, file2, output_file):
            """Combine two M3U8 files into one M3U format file"""
            try:
                combined_content = []
                files_processed = []
                
                # Process each file
                for input_file in [file1, file2]:
                    if os.path.exists(input_file):
                        with open(input_file, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        lines = content.split('\n')
                        for line in lines:
                            line = line.strip()
                            if not line:
                                continue
                            
                            # Add M3U header only once
                            if line.startswith('#EXTM3U'):
                                if not combined_content:
                                    combined_content.append(line)
                            # Keep track info
                            elif line.startswith('#EXTINF:'):
                                combined_content.append(line)
                            # Keep URLs (not starting with #)
                            elif not line.startswith('#'):
                                combined_content.append(line)
                            # Keep some other tags
                            elif line.startswith('#EXTVLCOPT:'):
                                combined_content.append(line)
                        
                        files_processed.append(input_file)
                        print(f"Processed {input_file}")
                
                # Ensure we have M3U header
                if not any(line.startswith('#EXTM3U') for line in combined_content):
                    combined_content.insert(0, '#EXTM3U')
                
                # Write combined M3U file
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(combined_content))
                
                print(f"Successfully combined {files_processed} into {output_file}")
                return True
                
            except Exception as e:
                print(f"Error combining files: {str(e)}")
                return False
        
        # Convert files directly to root directory - ALWAYS run this step
        echo "Starting conversion process..."
        
        # Convert PPV file
        if os.path.exists('downloads/ppv.m3u8'):
            convert_m3u8_to_m3u('downloads/ppv.m3u8', 'ppv.m3u')
            print("PPV conversion completed")
        else:
            print("PPV file not found, creating placeholder")
            with open('ppv.m3u', 'w') as f:
                f.write('#EXTM3U\n#EXTINF:-1,PPV - File Not Found\n# Error: PPV file was not downloaded\n')
        
        # Convert DaddyLive file
        if os.path.exists('downloads/dlive.m3u8'):
            convert_m3u8_to_m3u('downloads/dlive.m3u8', 'dlive.m3u')
            print("DaddyLive conversion completed")
        else:
            print("DaddyLive file not found, creating placeholder")
            with open('dlive.m3u', 'w') as f:
                f.write('#EXTM3U\n#EXTINF:-1,DaddyLive - File Not Found\n# Error: DaddyLive file was not downloaded\n')
        
        print("All conversions completed!")
        EOF
        
        # Run the conversion - continue even if downloads failed
        python3 convert_to_m3u.py || echo "Python script had issues but continuing..."
        
    - name: Display results
      run: |
        echo "=== Conversion Results ==="
        if [ -f "ppv.m3u" ]; then
          echo "✓ ppv.m3u created successfully"
          echo "Size: $(ls -lh ppv.m3u | awk '{print $5}')"
        fi
        
        if [ -f "dlive.m3u" ]; then
          echo "✓ dlive.m3u created successfully"
          echo "Size: $(ls -lh dlive.m3u | awk '{print $5}')"
        fi
        
        echo ""
        echo "=== Root Directory Contents ==="
        ls -la *.m3u
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: converted-m3u-files
        path: |
          ppv.m3u
          dlive.m3u
          downloads/*.m3u8
        retention-days: 7

    - name: Commit and push results
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the M3U files
        git add ppv.m3u dlive.m3u
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Auto-update: Convert M3U8 to M3U files $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "✓ Files committed and pushed to repository"
        else
          echo "No changes to commit"
        fi
